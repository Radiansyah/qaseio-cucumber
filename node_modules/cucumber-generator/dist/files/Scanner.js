"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scanner = void 0;
const glob_1 = __importDefault(require("glob"));
const path = __importStar(require("path"));
class Scanner {
    constructor(rootDir) {
        this.rootDir = rootDir;
    }
    async scanForFeatures() {
        const root = this.rootDir.endsWith(path.sep)
            ? this.rootDir.slice(0, this.rootDir.length - 1)
            : this.rootDir;
        return await new Promise((resolve, reject) => glob_1.default(root + '/**/*.feature', { follow: true }, (err, matches) => {
            if (err) {
                return reject(err);
            }
            resolve({
                absolute: matches,
                relative: matches.map((r) => r.replace(root.replace(/\\/g, '/'), '').substr(1)),
            });
        }));
    }
}
exports.Scanner = Scanner;
