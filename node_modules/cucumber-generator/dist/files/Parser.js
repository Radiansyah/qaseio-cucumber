"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const gherkin_1 = __importDefault(require("gherkin"));
const cucumber_messages_1 = require("cucumber-messages");
const path = __importStar(require("path"));
var GherkinDocument = cucumber_messages_1.messages.GherkinDocument;
const array_flatten_1 = require("array-flatten");
class Parser {
    constructor(rootDir) {
        this.rootDir = rootDir;
    }
    async parse(name) {
        const envelopes = await new Promise((resolve, reject) => {
            const readable = gherkin_1.default.fromPaths([path.join(this.rootDir, name)], {
                includeGherkinDocument: true,
                includePickles: true,
                includeSource: false,
            });
            const envelopes = [];
            readable.on('data', (d) => envelopes.push(d));
            readable.on('end', () => resolve(envelopes));
            readable.on('error', reject);
        });
        return envelopes
            .filter((e) => e.gherkinDocument)
            .map((d) => GherkinDocument.create(d.gherkinDocument));
    }
    static toFeatures(doc) {
        return doc.map((doc) => {
            var _a, _b, _c;
            return ({
                label: ((_a = doc.feature) === null || _a === void 0 ? void 0 : _a.name) || '',
                scenarios: ((_c = (_b = doc.feature) === null || _b === void 0 ? void 0 : _b.children) === null || _c === void 0 ? void 0 : _c.map((pickle) => {
                    var _a, _b, _c, _d;
                    return ({
                        label: ((_a = pickle.scenario) === null || _a === void 0 ? void 0 : _a.name) || '',
                        examples: Object.assign({}, ...array_flatten_1.flatten(array_flatten_1.flatten(((_b = pickle.scenario) === null || _b === void 0 ? void 0 : _b.examples) || []).map((e) => {
                            var _a;
                            return (((_a = e.tableHeader) === null || _a === void 0 ? void 0 : _a.cells) || []).map((h, i) => ({
                                [h.value || '']: (e.tableBody || []).map((b) => { var _a; return ((_a = b.cells) === null || _a === void 0 ? void 0 : _a[i].value) || ''; }),
                            }));
                        }))),
                        stops: ((_d = (_c = pickle.scenario) === null || _c === void 0 ? void 0 : _c.steps) === null || _d === void 0 ? void 0 : _d.map((step) => {
                            const parameters = [];
                            if (step.dataTable) {
                                parameters.push('data');
                            }
                            let matches;
                            let rgx = /<([a-zA-Z0-9\s:_-]+)>/g;
                            while ((matches = rgx.exec(step.text || '')) != null) {
                                parameters.push(matches[1]);
                            }
                            return {
                                label: step.text || '',
                                parameters,
                                stop: (step.keyword || '').trim().toLowerCase(),
                            };
                        })) || [],
                    });
                })) || [],
            });
        });
    }
}
exports.Parser = Parser;
