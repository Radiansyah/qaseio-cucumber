"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runner = void 0;
const __1 = require("..");
const Scanner_1 = require("../files/Scanner");
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
exports.runner = async (args) => {
    const featuresDirectory = path.isAbsolute(args.featuresDirectory)
        ? args.featuresDirectory
        : path.join(process.cwd(), args.featuresDirectory);
    const outputDirectory = !args.outputDirectory || path.isAbsolute(args.outputDirectory)
        ? args.outputDirectory
        : path.join(process.cwd(), args.outputDirectory);
    const scanner = new Scanner_1.Scanner(featuresDirectory);
    const generator = new __1.TemplateGenerator(args.template, {
        featuresDirectory,
        templateDirectory: args.templatesDirectory || path.join(__dirname, '..', '..', 'templates'),
        variables: {
            relativePathToFeatures: args.relativePathToFeatures,
        },
        scanner,
    });
    const files = await scanner.scanForFeatures();
    console.log(chalk_1.default.bold('\nFound files:'));
    for (let file of files.relative) {
        console.log(chalk_1.default.gray(file));
    }
    const result = await generator.generate();
    const writer = args.output == 'file'
        ? new __1.FileWriter(args.maintainStructure, outputDirectory, args.includeDirectory)
        : new __1.StdioWriter();
    const processed = (await Promise.all(Object.keys(result).map(async (file) => {
        const content = result[file];
        return await writer.write(file, content);
    }))).filter((f) => typeof f === 'string');
    console.log(chalk_1.default.bold.green(`\nGenerated ${processed.length} files:`));
    for (let file of processed) {
        console.log(chalk_1.default.green(path.join(args.outputDirectory || '', file.replace(/\.features?$/, '.spec.ts'))));
    }
    console.log();
};
