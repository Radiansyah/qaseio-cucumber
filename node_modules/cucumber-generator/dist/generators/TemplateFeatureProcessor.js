"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateFeatureProcessor = void 0;
const path = __importStar(require("path"));
const ejs = __importStar(require("ejs"));
const fs = __importStar(require("fs"));
const array_flatten_1 = require("array-flatten");
class TemplateFeatureProcessor {
    static async processFeature(feature, { variables: vars, featureFile: f, templateDirectory, template }) {
        const stopKeys = array_flatten_1.flatten(feature.scenarios)[0].stops.map((s) => s.stop);
        const variables = Object.assign(Object.assign({}, vars), { featureFilePath: `${vars.relativePathToFeatures}/${f}`, stops: stopKeys.filter((s, i) => stopKeys.indexOf(s) === i), feature, capitalize: this.capitalize, range: this.range });
        return ejs.render(fs.readFileSync(path.join(templateDirectory, template + '.ejs')).toString(), variables);
    }
    static capitalize(value) {
        return value.charAt(0).toUpperCase() + value.slice(1);
    }
    static range(from, to) {
        if (to === undefined) {
            to = from;
            from = 0;
        }
        const result = [];
        for (let i = from; i < to; i++) {
            result.push(i);
        }
        return result;
    }
}
exports.TemplateFeatureProcessor = TemplateFeatureProcessor;
