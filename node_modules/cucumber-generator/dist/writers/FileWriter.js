"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileWriter = void 0;
const path = __importStar(require("path"));
const fs_1 = require("fs");
class FileWriter {
    constructor(maintainStructure, outputDirectory, includeDirectory = false) {
        this.maintainStructure = maintainStructure;
        this.outputDirectory = outputDirectory;
        this.includeDirectory = includeDirectory;
    }
    async write(file, content) {
        var _a;
        let outFile = path.join(this.outputDirectory, file);
        let directory = outFile.substr(0, outFile.lastIndexOf(path.sep));
        if (this.includeDirectory) {
            const fn = (_a = file.match(/(^|\/)([^\/]*)\.features?$/)) === null || _a === void 0 ? void 0 : _a[2];
            directory = path.join(directory, fn);
            outFile = path.join(directory, 'Steps.ts');
        }
        else {
            outFile = outFile.replace(/\.features?$/, '.spec.ts');
        }
        if (fs_1.existsSync(outFile)) {
            return false;
        }
        await new Promise((resolve, reject) => {
            if (!fs_1.existsSync(directory)) {
                fs_1.mkdir(directory, { recursive: true }, (err) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            }
            else
                resolve();
        });
        await new Promise((resolve, reject) => fs_1.writeFile(outFile, content, (err) => {
            if (err) {
                reject(err);
            }
            else {
                resolve();
            }
        }));
        return outFile.replace(this.outputDirectory, '');
    }
}
exports.FileWriter = FileWriter;
